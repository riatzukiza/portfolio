
(include "kit-interface/header")
(import-namespace interface)

(define Ordered-map Interface
  (init ((*members (new Map)) ;; {a:5,b:6,c:10}

         (*key-pointers (new Map)) ;; {a:0,b:1,c:2}

         (*keys [])   ;; [ 'a 'b 'c ]
         (*values []) ;; [ 5 6 10 ]
         ))
  (gett size this.*keys.length)
  (gett length this.*keys.length)
  (def-generic clear ( *members *key-pointers *keys *values )
    (.clear members)
    (.clear *key-pointers)
    (assign this.*keys [])
    (assign this.*values []))

  (def-generic has (key [*members])

    (.has *members key))

  (def-generic get (key [*members _ *keys])
    (.get *members key))

  (def-generic each (callback *values)
    (.each *values (=> (v i) (if (not (= v null))
                               (callback v (get this.*keys i)))))
     this)


  (def-generic map (callback [*members _ *keys *values])
    (collect r ((create Ordered-map))
             (each *keys (k)
                   (.set r k (f (get *members k) k r)))))

  (def rebuild ()
    (const new-keys [])
    (const new-values [])
    (each this (v k)
          (.set this.*key-pointers k new-keys.length)
          (.push new-keys k)
          (.push new-values v)
          )
    (assign this.*values new-values)
    (assign this.*keys new-keys))

  (def-generic *delete (key *members *key-pointers *keys *values)

    (var i (.get *key-pointers key))

    (.delete *members key )
    (.delete *key-pointers key)
    (set *keys i null)
    (set  *values i null))
  (def-generic delete (key *members *keys)
    (.*delete this key)
    (if (> (-  *keys.length *members.size) 2)
        (.rebuild this)))

  (def-generic push ([key value] [*members *key-pointers *keys *values])
    (remember *members key

              (.push *keys key)
              (.set *key-pointers key (- (.push *values value) 1))


              value))

  (def-generic pop ([*members *key-pointers *keys *values])
    (var key (.pop *keys)
         value (.pop *values))

    (.delete *key-pointers key)
    (.delete  members key)

    value)

  (def-generic shift ([*members *key-pointers *keys *values])
    (var key (.shift *keys)
         value (.shift *values))

    (.delete *key-pointers key)
    (.delete *members key)

    value)

  (def-generic unshift ([ key value] [*members *key-pointers *keys *values])
    (remember *members key

              (.unshift *keys key)
              (.set *key-pointers key (- (.unshift *values value) 1))

              value))

  (def-generic set (key value [*members *key-pointers *keys *values])
    (if (.has *members key)

        (let ((i (get *key-pointers key)))
          (set *values i value)
          (.set *members key value))

        (do (.push *keys key)
            (.set *key-pointers key (- (.push *values value) 1))

          (.set *members key value)

          value))))

(export Ordered-map)
