(meta
 (assign Array.prototype.bind
         (def Array.bind (a f)
           (.reduce a (=> (r e i)
                          (each (f e i) (x)
                                (.push r x)) r) []))))

(def Array.transform (f a (default r a))
  (collect r r (each a (e i) (set r i (f e i)))))

(assign Array.prototype.bind
        (def Array.bind (a f)
          (.reduce a (=> (r e i)
                         (each (f e i) (x)
                               (.push r x)) r) [])))



(def Array.prototype.each (f)
  (.for-each this f)
  this)

(def Array.prototype.bind (f)
  (collect r [] (pipe this (each (a) (.push r (f a))))))

(def Map.prototype.each (f)
  (.for-each this f)
  this)


;; (def Array.prototype.remove (value)
;;   (const i (.index-of this value))
;;   (ternary (> i -1) (.splice this i 1)
;;            false))
;; (def Array.prototype.clear ()
;;   (while this.length
;;     (.pop this)))

;; (assign Array.prototype.pool (assign Array.pool []))
;; (assign Array.prototype.spawn (assign Array.spawn
;;                                       (lambda ((dots args))
;;                                         (if (> this.pool.length 0)
;;                                             (Array.call (.pop this.pool)
;;                                                         (dots args)
;;                                                         )
;;                                             (new Array (dots args))
;;                                             ))))
;; (assign Array.prototype.despawn (assign Array.despawn Spawnable.despawn))
