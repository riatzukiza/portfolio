
(include "kit-interface/header")
(import-namespace interface)
(require! (lit List) "@shared/data-structures/list.js")

(const empty-nodes [])
(define Node Interface
  (init (list item next prev))
  (def spawn (list item next prev)
    (if (= empty-nodes.length 0)
        ((create Node list item next prev))
        (.set (.bind (.pop empty-nodes) list next prev) item)))
  (def despawn ()
    (set this 'list null  'next null 'prev null)
    (.push empty-nodes this))
  (gett is-head (= this this.list.head))
  (gett is-tail (= this this.list.tail))
  (def bind (list next prev) (.init this list null next prev))
  (def set (item) (assign this.item item) this))

(define List Interface
  (init () (set this.length 0))
  (gett count this.length)
  (gett size this.length )
  (gett empty? (= this.length 0))
  (def-generic from (array-like (f (=> (a) a)))
    (const list ((create this)))
    (each array-like (e i)
          (list.push (f e))))
  (def of ((dots items)) (this.from items))

  (def push (item) (get (.push-node this (.spawn Node this item null null)) 'item))
  (def unshift (item) (get (.unshift-node this (.spawn Node this item null null)) 'item))

  (def pop () (get (.pop-node this) 'item))
  (def shift () (get (.shift-node this) 'item))

  (def insert (item predicate))
  (def remove (item)
    (var node this.head)
    (var success false)
    (while node
      (if (!= node.item item)
          (do (assign node node.next)
              false)
          (do (assign node false)
              (get (.remove-node this node) 'item)))))

  (def node (item) (.spawn Node this item null null))

  (def push-node (node)
    (if (not this.empty)
        (assign this.tail (assign this.tail.next (.bind node this null this.tail)))
        (assign this.head (assign this.tail (.bind node this null null))))
    (incr this.length)
    node)
  (def unshift-node (node)
    (if (not this.empty)
        (assign this.head (assign this.head.prev (.bind node this this.head null)))
        (assign this.head (assign this.tail (.bind node this null null))))
    (incr this.length)
    node)
  (def pop-node () (return (ternary this.empty? null (.remove-node this this.tail))))
  (def shift-node () (return (ternary this.empty? null (.remove-node this this.head))))

  (def insert-node (n predicate))
  (def remove-node (node)
    (if (not (= node.list this)) false)
    (if (= node this.head) (assign this.head node.next))
    (if (= node this.tail) (assign this.tail node.prev))

    (if node.next (assign node.next.prev node.prev))
    (if node.prev (assign node.prev.next node.next))
    (decr this.length)
    (.despawn node)
    node)
  (def splice-node (prev node next))
  (def-generic rotate-node (node (next node.next) (prev node.prev))
    (set node 'prev next.prev
         'next node.next)
    (set next 'prev node.prev
         'next node.next)
    (if (= node this.head) (assign this.head next))
    (if (= next this.tail) (assign this.tail node))
    )
  (def sort (predicat e))
  (def each (f)
    (var node this.head)
    (while node
      (f node.item node)
      (assign node node.next))
    this)
  (def map (f)
    (var result ((create List)))
    (var node this.head)
    (while node
      (.push result (f node node.next node.prev))))
  (def to-array ())

  (def reduce (f r) (.each this (=> (e i l) (assign r (f r e i l)))) r)

  (def-generic find-node (f (node this.head))
    (if (f node)
        node
        (not (= node this.tail))
        (List.find f node.next)
        false))
  (def-generic find (f (node this.head))
    (var r (List.find-node f node))
    (if r r.value false))


  (def-generic rotate ()
    (this.unshift-node (this.pop-node))
    )

  (def-generic rotate-until (predicate (t 0))
    (const condition (predicate this.head.item))
    ;; (print "result of predicate" predicate "on" this.head.item "is" condition "try" t "on list of size" this.size )
    ;; (print "try number" t "is less  than" "length minus 1" (- this.size 1))
    (if condition
        (do
         ;; (print "found and rotated" this.head)
         this.head.item)
        (< t (- this.size 1))
        (do
         ;; (print "did not find, rotating" this)
         (.rotate this)
         (const t* (+ t 1))
          (.rotate-until this predicate t*))
        (do
         ;; (print "did not find" this "after" t "tries")
         false))))

(export List)
