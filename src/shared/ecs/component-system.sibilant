
(include "kit-interface/header")
(import-namespace interface)
(macro accumulate (name ...body) `(assign @name (pipe @name ...@body)))

(require! R "ramda")

(require! (lit Ordered-map) "@shared/data-structures/maps/ordered.js"
          (lit Dynamic-pool) "@shared/pooling/dynamic-pool.js"
          (lit Component) "@shared/ecs/component.js"
          (lit Group) "@shared/data-structures/group.js"
          )


(def spawn-component  (entity systems) (#-> systems.get (.spawn  entity)))

(def component-list  (entity) (R.map (spawn-component entity)))

(def remove (entity) (#-> (get 'system) (.clear entity)))

(var clear (#->  .clear))
(define System Interface
  (interface Component)
  (def register ())
  (init (process interface
                 (components ((create Ordered-map)))
                 (pool ((create Dynamic-pool)  interface))
                 (thread (Promise.resolve)))
        (.register this))

  (gett system this)
  (template true)

  (gett game this.process)

  (def build ()
    (unless (or this.template )
      (.init this)))

  (def-generic clear (pool components entity )
    (.delete components entity)
    (.clear pool))

  (def-generic get (entity components)
    (.get components entity))

  (def-generic spawn (entity pool components)
    (collect c (.spawn pool entity  this)
             (.set components entity c)))


  (def *update-component (component t)
    (throw (new Error "need to override *update-component on sub classes of component system")))

  (def *prepare () )
  (def *cleanup () )
  (def prepare () (.*prepare this))
  (def cleanup () (.*cleanup this))

  (def-generic *update-all (t components )
    (this.prepare)
    (.each components (fpipe (this.*update-component t)))
    (.cleanup this))

  (def update (t) (accumulate this.thread (then-do (.*update-all this t)))))



(def System.build ()
  (unless (or this.template )
    (.init this)))

(def-generic System.clear (pool components entity )
  (.clear pool))

(def-generic System.get (entity components)
  (.get components entity))

(def-generic System.spawn (entity pool components)
  (collect c (.spawn pool entity  this)
           (.set components entity c)))


(def System.update (t) (accumulate this.thread (then-do (.*update-all this t))))

(export System)
