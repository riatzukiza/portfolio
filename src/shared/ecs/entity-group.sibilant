
(include "kit-interface/header")
(import-namespace interface)
(macro accumulate (name ...body) `(assign @name (pipe @name ...@body)))

(require! R "ramda")

(require! (lit Ordered-map) "@shared/data-structures/maps/ordered.js"
          (lit Dynamic-pool) "@shared/pooling/dynamic-pool.js"
          (lit Group) "@shared/data-structures/group.js")


(def spawn-component  (entity systems) (#-> systems.get (.spawn  entity)))

(def component-list  (entity) (R.map (spawn-component entity)))

(def remove (entity) (#-> (get 'system) (.clear entity)))

(var clear (#->  .clear))
(define Entity-group Interface

  (init (name aspects system (group ((create Group)))))
  (gett size this.group.size)

  (def-generic spawn ( aspects system group)
    (const self this)
    (collect e (.spawn system aspects )
             (assign e.group self)
             (.add group e)))

  (def-generic clear (group)
    (each group (entity) (.despawn entity))
    (.clear group))

  (def-generic has (entity group) (group.has entity))


  (def-generic despawn (entity group)
    (.remove group entity)
    (.despawn entity )))



(export Entity-group)
