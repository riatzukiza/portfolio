
(include "kit-interface/header")
(import-namespace interface)
(macro accumulate (name ...body) `(assign @name (pipe @name ...@body)))

(require! R "ramda")

(require! (lit Ordered-map) "@shared/data-structures/maps/ordered.js"
          (lit Dynamic-pool) "@shared/pooling/dynamic-pool.js"
          (lit Group) "@shared/data-structures/group.js")


(def spawn-component  (entity systems) (#-> systems.get (.spawn  entity)))

(def component-list  (entity) (R.map (spawn-component entity)))

(def remove (entity) (#-> (get 'system) (.clear entity)))

(var clear (#->  .clear))
(define Entity Interface

  (doc "used as a key to retrieve related components from different systems.")

  (init (system id aspects (components (map aspects (aspect i)
                                            (pipe system.process.systems
                                                  (.get aspect)
                                                  (.spawn this))))))
  (gett entity this)

  (def-generic despawn (entity components )
    (.each entity.components (remove entity))
    (assign entity.id null))

  (def spawn (  aspects system) (.spawn system aspects )))

(def-generic Entity.despawn (entity components )
  (.release this.system.pool this  ))

(def-generic Entity.clear ()
  (each this.components (c)
        (.release c.system c)
        (assign c.entity null)
        )
  (assign this.components [])
  (assign this.id null))

(export Entity)
