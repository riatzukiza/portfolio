(namespace vector)
(include "kit/header" )

(require! (lit Vector Trail-vector) "./vectors")
(require! noise "./noise")

;; needs more work to take both quoted and litteral terms.
;; rn this is similar to (get x 'y 'z) which becomes x.y.z and currently cannot
;; use variably named terms such as (get x y 'z) which would become x[y].z
;; (get? x y z) becomes x?.y?.z
(macro get? (...args)
       (const terminal (.pop args))
       [...(.map args (=> (arg) [@arg "?."])) terminal] 
       )
(macro if! (cond ...body) `(state if @cond  ...@(interleave ";\n" body)))

(macro else! (...body) ["else " `(block ...@(interleave ";\n" body))])
(macro if-else! (cond if-block else-block)
       [`(state if @cond  ...@(interleave "\n" if-block.contents))
         "else " `(block ...@(interleave ";\n" else-block.contents))
         ]
       )
(const waiting-decay (new Set))



(def-generic  module.exports.create-particle-updater (config , game)
  (def-generic particle-updater (vel,
                                 p,
                                 field,
                                 pheremones,
                                 tick,
                                 (decay false),
                                 (win false)
                                 home-pos
                                 (loose (or (isNaN vel.xd) (isNaN vel.yd)
                                           (>= (get? vel trail length)
                                                config.max-trail))))

    ;; (if! (or (isNaN p.x) (isNaN p.x))
    ;;      (print (lit vel p field pheremones tick decay win home-pos loose pH vec
    ;;                  pos angle length))
    ;;      (throw (new RangeError "position is not a number")))
    ;; (if! (or (isNaN vel.xd) (isNaN vel.yd))
    ;;      (print (lit vel p field pheremones tick decay win home-pos loose pH vec
    ;;                  pos angle length))
    ;;      (throw (new RangeError "velocity is not a number")))
    (const pos (.spawn Vector (or (Math.min (Math.max (Math.round (/ p.x config.size)) 0)
                                            (- config.columns 1))
                                  1)
                       (or (Math.min (Math.max (Math.round (/ p.y config.size)) 0)
                                     (- config.rows 1))
                           1)))

    ;; (if! (or (isNaN pos.x) (isNaN pos.x))
    ;;      (print (lit vel p field pheremones tick decay win home-pos loose pH vec
    ;;                  pos angle length))
    ;;      (throw (new RangeError "position is not a number")))
    (const angle (* (noise.simplex3 (/ pos.x config.angle-zoom 5)
                                  (/ pos.y config.angle-zoom 5)
                                  (* tick (/ config.noise-z 10000)
                                     ))
                    Math.PI
                    2
                    ))
    ;; (if! (isNaN angle)
    ;;      (print (lit vel p field pheremones tick decay win home-pos loose pH vec
    ;;                  pos angle length))
    ;;      (throw (new (RangeError "angle is not a number"))))
    (const length (/ (* (noise.simplex3 (+ (/ pos.x 50)
                                           40000)
                                        (+ (/ pos.x 50)
                                           40000)
                                        (* tick (/ config.noise-z 10000)))
                        config.field-force)
                     20))

    ;; (if! (isNaN length)
    ;;      (print (lit vel p field pheremones tick decay win home-pos loose pH vec
    ;;                  pos angle length))
    ;;      (throw (new (RangeError "length is not a number"))))

    (const pH (get pheremones pos.x pos.y))
    ;; (if! (or (isNaN pH.x) (isNaN pH.y))
    ;;      (print (lit vel p field pheremones tick decay win home-pos loose pH vec
    ;;                  pos angle length))
    ;;      (throw (new (RangeError "length is not a number"))))

    (.set-length (get field pos.x pos.y) length)
    (.set-angle (get field pos.x pos.y) angle)

    (const vec (get field pos.x pos.y))
    ;; (if! (or (isNaN vec.x) (isNaN vec.y))
    ;;      (print (lit vel p field pheremones tick decay win home-pos loose pH vec
    ;;                  pos angle length))
    ;;      (throw (new (RangeError "length is not a number"))))

    (if! (not pH.last-check)
      (assign pH.last-check tick)
      (.add waiting-decay pH))

    (if! (and (or decay (and config.limit-decay
                            (> waiting-decay.size config.max-in-decay)))
             (< pH.last-check tick))
         (for-of!  cell waiting-decay
                   (.div-to cell (* config.decay (+ 1 (- tick cell.last-check))) 2)
              (assign cell.last-check tick)
              (.delete waiting-decay cell)))

    (if! config.step-wise-update
        (.add-to pH vec))

    (if! config.track-trail
         (if-else! (not vel.trail)
                   ( (set vel 'win-count 0
                          'loose-count 0
                          'trail [(.spawn Trail-vector vel.xd vel.yd pH)]))
                   ((.push vel.trail (.spawn Trail-vector vel.xd vel.yd pH)))))
    (if! (and loose config.punish-loosers)
      (const weight (/ vel.loose-count (+ vel.win-count 1)))
      (for-of!  (lit x,y, pheremones) vel.trail
            (pheremones.sub-from
             (lit
              (x (* x weight config.ant-influence))
              (y (* y weight config.ant-influence))))))
    (if! loose
      ;; (.emit game.events 'loose)
      (for-of! seg vel.trail
               (.despawn seg))
      (set vel 'xd 0 'xd 0 'trail [])
      (set p 'x home-pos.x
           'y home-pos.y)
      (incr-by vel.loose-count 1))

    (if! (and win config.reward-winners)
         (const weight (/ vel.loose-count (+ vel.win-count 1)))
         (for-of! (lit x,y, pheremones) vel.trail 
                  (pheremones.add-to
                   (lit
                    (x (* x weight config.ant-influence))
                    (y (* y weight config.ant-influence))))))
    (if! win
         ;; (.emit game.events 'win)

         (for-of! seg vel.trail
                  (.despawn seg))

         (set vel 'xd 0 'yd 0 'trail [])
         (set p 'x home-pos.x 'y home-pos.y)
         (incr-by vel.win-count 1))
    (if! (> (pH.get-length) config.max-length) (pH.set-length config.max-length))
    (.accelerate vel [pH.x pH.y])
    (.add-to pH (lit (x (* vel.xd config.ant-influence))
                     (y (* vel.yd config.ant-influence))))
    (.despawn pos)

    )
  particle-updater)
(def module.exports.create-vector-field (columns rows)
  (const field (new Array columns))
  (for! (x 0) (< x columns) (++ x)
       (set field x (new Array rows))
       (for! (y 0) (< y rows) (++ y)
            (set (get field x) y (.spawn Vector 0 0))))
  field)
