(include "kit-interface/header")
(import-namespace interface)

(require! (lit Object-pool) "@shared/pooling/object-pool.js"
          (lit Pooled-system) "@shared/pooling/pooled-system.js"
          (lit Renderable) "@shared/systems/rendering/renderable.js"
          (lit Gl) "@shared/gl.js")

(var bound (#-> .bind )
     clear (#-> .clear )
     rendered (#-> .render)

     unbound (#-> .unbind)
     disabled (#-> .disable)

     enabled (#-> .enable))


(define Layer  Pooled-system
  (render? true)

  (init (limit
         (interface Renderable)
         (uniform [])
         (shaders [])
         context
         (program (Gl.program (first shaders) (second shaders) context))
         (*members (interface.structure.Array limit))
         (buffer (Gl.buffer *members context)))


        (.call Pooled-system.init this
               interface
               ;; totally want a dynamic pool here, but because the members
               ;; array is a fixed sized element, I will need to extend the base
               ;; object pool to use structs, and extend the dyn pool to use the new obj
               ;; pool type for its buckets.
               ((create Object-pool) limit interface *members))

        (.push this.rendering.layers this))



  (def spawn () (pipe this.*pool (.aquire)))

  (def despawn (o)
    (pipe this.*pool (.release o)))

  (def-generic clear (buffer *members context)

    (pipe buffer .bind (.data *members.data) .unbind))

  (def-generic enable (buffer uniform program context)

    (.bind buffer)

    (.enable program)
    (each uniform (uniform)
          (if (function? uniform)
              (.enable (uniform context))
              (.enable uniform)

              )
          )
    (.enable-gl-attributes this.interface.structure))

  (def-generic disable (buffer uniform program)

    (.disable program)


    (.unbind buffer))

  (def-generic draw (context)

    (unless (= this.*pool.used 0)
      (.draw context context.POINTS  (- this.*pool.size this.*pool.used ) this.*pool.used)))

  (def-generic render ()

    (when this.render?
      (.clear this)
      (.enable this)

      (.draw this )

      (.disable this))))
(export Layer)
