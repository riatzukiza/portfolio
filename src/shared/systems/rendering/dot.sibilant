(include "kit-interface/header")
(import-namespace interface)

(require! (lit Component System) "@shared/ecs.js"

          (lit Physics) "@shared/systems/physics/index.js"
          (lit Vertex) "@shared/systems/rendering/vertex.js"

          (lit Position) "@shared/systems/position.js"
          (lit Gl ) "@shared/gl.js"
          )

(macro read-shader (path)
       (require! 'fs)
       (print "loading shader" path.token)
       ["`" (fs.read-file-sync (eval path.token) "utf8") "`"])


(define uniforms Interface
  (init (game))
  (gett res (Gl.uniform 'Vector2 "Resolution" this.game.config.dimensions))
  (scale (Gl.uniform 'Float "Scale" 1.0)))

(define shaders Interface

  (vert (read-shader "./shaders/scaling.vert"))

  (frag (read-shader "./shaders/scaling.frag")))


(def vertex-layer (limit game)
  (.init uniforms game)
  (.spawn game.rendering limit Vertex
          [ uniforms.res uniforms.scale]
          [shaders.vert shaders.frag]))

(define Dot-interface Component

  (*color {r 0 g 0 b 0 a 0})
  (gett color this.*color)
  (sett color c (assign this.*color c))

  (gett pos this.entity.position-interface)
  (gett scale this.entity.physical-properties.scale)
  (gett point this.vertex.point)
  (def register ()
    (unless this.vertex (assign this.vertex (.spawn this.system.verts))))
  (def *clear ()
    (assign this.point.x 0)
    (assign this.point.y 0)
    (assign this.point.z 0)
    (assign this.vertex.size 0)

    (assign this.vertex.color.r 0)
    (assign this.vertex.color.g 0)
    (assign this.vertex.color.b 0)
    (assign this.vertex.color.a 0)
    )
  )

(export Dot-interface)

(define Dot System
  (max-verts 100000)
  (def register ()
    (assign this.verts (vertex-layer this.max-verts this.game)))

  (interface Dot-interface)

  (def spawn (entity )
    (var c (.call System.spawn this entity ))
       c)

  (def *update-component (dot)

    (set dot.vertex.point
         'x dot.pos.x
            'y dot.pos.y
            'z dot.pos.z)
       (set dot.vertex
            'size dot.scale)
       (set dot.vertex.color
            'r dot.color.r
            'g dot.color.g
            'b dot.color.b
            'a dot.color.a)))

(export Dot)
