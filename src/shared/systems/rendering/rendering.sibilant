
(include "kit-interface/header")
(import-namespace interface)

(require! (lit Layer) "@shared/systems/rendering/layer.js"
          (lit Pooled-system) "@shared/pooling/pooled-system.js"
          (lit System) "@shared/ecs.js"
          (lit Gl) "@shared/gl.js"
          (lit Scalar) "@shared/math/scalar.js")



(var bound (#-> .bind )
     clear (#-> .clear )
     rendered (#-> .render)

     unbound (#-> .unbind)
     disabled (#-> .disable)

     enabled (#-> .enable))

(def allow-alpha-blending (context)
  (.enable context.gl context.gl.BLEND)

  (.blend-equation context.gl context.gl.FUNC_ADD)

  (.blend-func-separate context.gl
                        context.gl.SRC_ALPHA
                        context.gl.ONE_MINUS_SRC_ALPHA
                        context.gl.ONE
                        context.gl.ONE_MINUS_SRC_ALPHA))


(define Rendering Pooled-system

  (init
   ((dimensions (window.size))
    (blend true )
    (context (Gl.context dimensions blend))
    (layers []))


   (set this.interface
        'context context
        'rendering this)

   (if! blend (allow-alpha-blending context))

   (.call Pooled-system.init this ))

  (interface Layer)

  (sett background-color (lit r g b a)
        (pipe this.context
              .make-current
              (.clear-color  (dots (.div Scalar [r g b a] 255)))))


  (def-generic resize ([ width height] context)
    (.resize context width height))

  (def load ((lit dimensions  blend))
       ((create Rendering ) dimensions  blend))

  (def-generic update (layers context)
    "render each visible dot to the screen"
    (.each layers rendered)))

(export Rendering)
