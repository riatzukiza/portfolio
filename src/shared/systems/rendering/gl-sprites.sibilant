
(include "kit-interface/header")
(import-namespace interface)

(require! (lit Component System) "@shared/ecs.js"

          (lit Physics) "@shared/systems/physics/index.js"

          (lit Position) "@shared/systems/position.js"
          (lit Gl ) "@shared/gl.js"
          )


(require! (lit Andy) "@shared/gl.js")
(require! (lit Renderable) "@shared/systems/rendering/renderable.js")




(def set-point (x y z vert)
  (set vert.point
       'x x
       'y y
       'z z))

(define Sprite-renderable Renderable

  (init (layer))

  (structure (new Andy.Gl.Type.Composite
                  (lit (point Andy.Type.Vector3)
                       (size Andy.Type.float))))
  (def clear ()
    (set-point 0 0 0 this)
    (assign this.point.scale 0)
    )

  (def despawn ()
    (.despawn this.layer this))
  )

(export Sprite-renderable)

(macro read-shader (path)
       (require! 'fs)
       (print "loading shader" path.token)
       ["`" (fs.read-file-sync (eval path.token) "utf8") "`"])


(define uniforms Interface
  (init (game))
  (gett res (Gl.uniform 'Vector2 "Resolution" this.game.config.dimensions))
  (scale (Gl.uniform 'Float "Scale" 1.0))
  ;; (sprite-image ws) ;; need a uniform later to have more than one sprite.
  )

(define shaders Interface

  (vert (read-shader "./shaders/sprite.vert"))

  (frag (read-shader "./shaders/sprite.frag")))


(const demo-image (.get-element-by-id document "sprite-texture"))
(def sprite-layer (limit texture-data game)
  (print demo-image)
  (const texture (.create-texture gl))
  (.bind-texture gl gl.TEXTURE_2D texture)
  (.texImage2D gl gl.TEXTURE_2D 0 gl.RGBA  gl.RGBA gl.UNSIGNED_BYTE texture-data)
  (.generate-mipmap gl gl.TEXTURE_2D)
  (.init uniforms game)
  (.spawn game.rendering limit Sprite-renderable
          [uniforms.res uniforms.scale]
          [shaders.vert shaders.frag]))

(define Sprite Component

  (color {r 0 g 0 b 0 a 0})

  (gett pos this.entity.position-interface)
  (gett scale this.entity.physical-properties.scale)
  (gett point this.sprite.point)
  (def register ()
    (unless this.sprite (assign this.sprite (.spawn this.system.sprites))))
  (def *clear ()
    (assign this.point.x 0)
    (assign this.point.y 0)
    (assign this.point.z 0)
    (assign this.sprite.size 0)))

(export Sprite)

(define Sprites System
  (max-sprites 100000)
  (def register ()
    (assign this.sprites (sprite-layer this.max-sprites demo-image this.game)))

  (interface Sprite)

  (def spawn (entity )
    (var c (.call System.spawn this entity ))
       c)

  (def *update-component (dot)
    (set dot.sprite.point
         'x dot.pos.x
         'y dot.pos.y
         'z dot.pos.z)
    (set dot.sprite 'size dot.scale)))

(export Sprites)
