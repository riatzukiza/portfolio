
(include "kit-interface/header")

(import-namespace interface)

(require! (lit Component System) "@shared/ecs.js"
          (lit Velocity) "@shared/systems/velocity.js"
          (lit Position) "@shared/systems/position.js")


(define Physical-properties Component

  (*scale 1)
  (*mass 1)

  (prior-mass 0)
  (prior-scale 0)

  (forces [])
  (gett prior-density (/ this.prior-mass this.prior-volume))
  (gett prior-volume (Math.pow this.prior-scale 3))

  (gett scale this.*scale)
  (gett mass this.*mass)

  (sett scale s
        (set this 'prior-scale this.scale
             '*scale s))
  (sett mass m
        (set this 'prior-mass this.mass
             '*mass m))

  (gett density (/ this.mass this.volume))
  (gett volume (Math.pow this.scale 3))

  (gett velocity (.get this.system.process.systems Velocity this.entity))

  (gett position (.get this.system.process.systems Position this.entity))
  (gett location this.position))

(export Physical-properties)

(define Physics System
  (interface Physical-properties)
  (*forces [])

  (def-generic register-force (F *forces)
    (print "registering force" F)
    ((create F) this))

  (def-generic register (forces)
    (assign this.*forces (.map forces (=> (F) (.register-force this F forces)))))

  (gett forces this.*forces)

  (def *update-component (c)
    (.each c.forces (#-> (.apply c)))))

(export Physics)

(define Physics.Force Interface
  (init (physics))
  (def build ()
       (unless (= this.name 'Physics.Force)
         (print "Physics.Force.build" "adding force to physics" this)
         (.push Physics.forces this)))

  (def-generic apply (physical-properties)
    (throw (new (Error "force does not have an applicator.")))))



