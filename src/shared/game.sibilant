(import Entity-system "./ecs.js")
(import Event-emitter "./kit/events/index.js")
(import Ticker "./ticker.js")
(import Ordered-map "./data-structures/maps/ordered.js")
(import Interface "./kit/interface/index.js")

(import Saveable "/shared/saveable.sibilant")

(define Game Saveable
  (init (config
         rendering
         (system-types [])
         (game-speed 1)
         (units [])
         (entity-groups [])
         (entities ((create Entity-system) this) )
         (events ((create Event-emitter)))
         (ticker ((create Ticker) (* game-speed 60) events))
         (systems ((create Ordered-map))))

        (var get-system-by-symbol systems.get
             set-system-by-symbol systems.set)

        (assign systems.get-by-symbol get-system-by-symbol)
        (def systems.get (proto ent)
          (var sys (get-system-by-symbol.call systems proto.symbol))

          (if ent (.get sys ent)
              sys))

        (.each system-types (=> (s) (.push systems [s.symbol ((create s) this)])))

        (.push this.systems [rendering.symbol rendering]))

  (gett ent this.entities)
  (gett game this)
  (gett process this)

  (def-generic add (s systems game) (.push systems [s.symbol ((create s) this)]))

  (def-generic start (systems events ticker rendering)

    (.stop this)
    (.start ticker)
    (.emit events 'start this)

    (on events 'tick (t) (.each systems (#-> (.update )))))

  (def-generic stop (ticker events)
    (.stop ticker)
    (.remove-all-listeners events 'tick))

  (def-generic clear (systems entities events ticker)
    (.stop ticker)
    (.clear entities )
    (.remove-all-listeners events)
    (.each systems (#-> .clear))))

(export Game)
