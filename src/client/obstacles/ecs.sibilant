
(include "kit-interface/header")
(import-namespace interface)
(macro accumulate (name ...body) `(assign @name (pipe @name ...@body)))


(require! (lit Ordered-map) "sibilant-game-engine/client/data-structures/ordered-map"
          (lit Dynamic-pool) "sibilant-game-engine/client/pooling/dynamic-pool"
          (lit Group) "sibilant-game-engine/client/data-structures/group"
          (lit Entity-group Entity Entity-system) "sibilant-game-engine/client/ecs/entity"
          (lit Component System) "sibilant-game-engine/client/ecs/component"
          )


(include "kit-interface/header")

(import-namespace interface)
(require! R "ramda")

(def spawn-component  (entity systems) (#-> systems.get (.spawn  entity)))

(def component-list  (entity) (R.map (spawn-component entity)))

(def remove (entity) (#-> (get 'system) (.clear entity)))

(var clear (#->  .clear))

(def-generic Entity.despawn (entity components )
  (.clear this)
  )

(def-generic Entity.clear (   system)
  (each this.components (c) (.clear c))
  (assign this.id null)
  (.release system.pool this  ))

(export Entity)

(def Entity-system.clear ()
  (.clear this.pool))

(def Entity-system.spawn (aspects )
  (.spawn this.pool this (incr this.current-id) aspects ))

(export Entity-system)

(def-generic Entity-group.init (name aspects system (group ((create Group) )))
  (set this 'name name
       'aspects aspects
       'system system
       'group group)
  this)

(def-generic Entity-group.clear (group)
  (.each group (=> (e)
                   (print "despawning" e)
                   (.clear e))))

(def-generic Entity-group.has (entity group) (group.has entity))

(def-generic Entity-group.spawn ( aspects system group)
  (collect e (.spawn system aspects )
           (.add group e)))

(def-generic Entity-group.despawn (entity group)
  (.remove group entity)
  (.clear entity ))

(export Entity-group)

(def-generic Component.clear (system)
  (.release system.pool this))

(export Component)

(def System.build ()
  (unless (or this.template )
    (.init this)))

(def-generic System.clear (pool components entity )
  (.clear pool))

(def-generic System.get (entity components)
  (.get components entity))

(def-generic System.spawn (entity pool components)
  (collect c (.spawn pool entity  this)
           (.set components entity c)))


(def System.*update-component (component t)
  (throw (new Error "need to override *update-component on sub classes of component system")))

(def-generic System.*update-all (t components )
  (.each components (fpipe (this.*update-component t))))

(def System.update (t) (accumulate this.thread (then-do (.*update-all this t))))

(export System)
