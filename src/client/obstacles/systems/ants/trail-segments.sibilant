(namespace obstacles)
(require! (lit Time-limit Timer) "@obstacles/systems/timer.js"
          (lit Trail-vector) "@shared/vectors.js"
          (lit rgba) "@obstacles/colors.js"
          config "@obstacles/config.js"
          )
(define Trail-segment Time-limit
  (doc-string "obstacles.systems.ant-trails.Trail-vector"
              "inherits from shared.ecs.Component"
              "A time limited vector component that modifies the signal field when the ant has either succeeded or failed"
              "If the time limit expires, it disapears.")

  (duration config.trail-limit)

  (def *clear ()
    (assign this.duration config.trail-limit)
    (.despawn this.vector))

  (gett seg-group (get (require "@obstacles/entities/trail-segments.js") 'trail-segments))
  (def callback (entity c)
    (.delete entity.ant.ant-trail.segments entity)
    (.despawn this.seg-group entity))

  (def apply ()
    (doc-string "obstacles.systems.ant-trails.Trail-segment.apply"
                ""
                "Apply the trail segment forward")

    (assign this.entity.trail-dot.color (rgba 0 255 0 255))

    (when config.reward-winners
      (const weight (/ this.entity.ant.ant-life.loose-count (+ this.entity.ant.ant-life.win-count 1)))
      (this.vector.pheremones.add-to
       (lit
        (x (* this.vector.x weight config.ant-influence))
        (y (* this.vector.y weight config.ant-influence))))

      (assign this.duration config.trail-result-duration)

      (.reset this)
      ))
  (def apply-inverse ()
    (doc-string "obstacles.systems.ant-trails.Trail-segment.apply"
                ""
                "Apply the trail segment backward")
    (assign this.entity.trail-dot.color (rgba 255 0 0 255))
    (when config.punish-loosers
      (const weight (/ this.entity.ant.ant-life.loose-count (+ this.entity.ant.ant-life.win-count 1)))
      (this.vector.pheremones.sub-from
       (lit
        (x (* this.vector.x weight config.ant-influence))
        (y (* this.vector.y weight config.ant-influence)))))
    (assign this.duration config.trail-result-duration)
    (.reset this)
    )

  (def register ()
    (.call Time-limit.register this)
    (assign this.vector (.spawn Trail-vector))))

(export Trail-segment)

(define Decaying-trails Timer
  (interface Trail-segment))

(export Decaying-trails)
