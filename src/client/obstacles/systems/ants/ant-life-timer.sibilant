(require! (lit Timer Time-limit) "@obstacles/systems/timer.js"
          (lit place-entity) "@shared/systems/collision.js"

          config "@obstacles/config.js"
          )

(include "../../../../../inc/dom.sibilant")
(import-namespace dom)
(const views (new Map))

(define Ant-life Time-limit
  (gett duration config.ant-life)
  (update-view? true)
  (view (.div .className "panel"
              .style (lit (width "48%"))
              (.div "life" (-> this.remaining-time))
              (.div "wins" (-> this.win-count))
              (.div "losses" (-> this.loose-count))))


  (def *clear ()
    (assign this.win-count null)
    (assign this.loose-count null)
    (assign this.triggered false))
  (def register ()
    (.call Time-limit.register this)
    (assign this.win-count 0)
    (assign this.loose-count 0))
  (gett home-pos (get (require "@obstacles/entities.js") 'home-pos))
  (gett seg-group (get (require "@obstacles/entities/trail-segments.js") 'trail-segments))


  (def callback (e c)
    ;; timer callback is called when the ant looses.
    ;; the timer is reset when the ant wins, so this callback is not called.

    (assign e.position-interface.x this.home-pos.x)
    (assign e.position-interface.y this.home-pos.y)
    (place-entity e c.system.process config)

    (incr c.loose-count)
    (for-of! seg e.ant-trail.segments
             (.apply-inverse seg.trail-segment))
    (.clear e.ant-trail.segments)

    (.reset c)))
(export Ant-life)

(define Ant-life-timer Timer
  (interface Ant-life))

(export Ant-life-timer)
