(namespace obstacles)
(require! (lit Component System) "@shared/ecs.js"
          config "@obstacles/config.js")

(include "../../../../inc/dom.sibilant")
(import-namespace dom)

(def-generic display-decimal (d (n 6)) (/ (Math.round (* (Math.pow 10 n) d)) (Math.pow 10 n)))
(macro cache (m k ...body)
       `(if (.has @m @k)
            (.get @m @k)
            (do (var r (scoped ...@body))
                (.set @m @k r) r)))
(const views (new Map))
(define Property-view Component
  (def register ())
  (gett parent-view this.system.view)
  (gett view (cache views this.entity
                       (.render (dom (.div .id (+ "entity-panel" this.entity.id)
                                           .className "panel"
                                           .style (lit (width "99%"))
                                           (.div "entity" this.entity.id)))
                                this.parent-view)))
  (def *clear ()
    (.remove this.view)
    (.delete views this.entity)
    )
  )

(define View-panel System
  (interface Property-view)
  (page-size 10)
  (page 0)
  (cursor 0)

  (def register ()
    (assign this.updated? true)
    (assign this.page-number-view (dom (.span (-> (+ (+ 1 this.page)  "/" this.pages))))))

  (gett pages (Math.ceil (/  this.components.length this.page-size)))
  (gett parent-view
        (cache views (+ this.title "parent")
               (const (lit debug-view) (require "@obstacles/dom.js"))
               (pipe (dom (.div .id "view-panel-top" .className "panel"
                                .style (lit (width "99%"))
                                (.h4 this.title .onclick (-> (if this.hidden
                                                                 (assign this.view.style.display "")
                                                                 (assign this.view.style.display "none")
                                                                 )))
                                (.button "prev" .onclick (-> (when (> this.page 0)
                                                               (decr this.page)
                                                               (assign this.updated? true)
                                                               (.render this.page-number-view))))
                                (.button "next" .onclick (-> (when (< this.page this.pages)
                                                               (incr this.page)
                                                               (assign this.updated? true)
                                                               (.render this.page-number-view))))
                                this.page-number-view))
                     (.render debug-view)))
        )
  (title "Entities")
  (gett hidden (print "hidden?" this.view.style)(= this.view.style.display "none"))

  (gett view (cache views this (.render (dom (.div .id (+ this.title "-container"))) this.parent-view)))
  (def *prepare () (assign this.cursor 0))

  (def *update-component (c t)
    (when (or this.updated? (= (mod this.game.ticker.ticks config.ui-polling-rate) 0))
      (.render this.page-number-view this.view)
      (if c.displayed? (.remove c.view))
      (assign c.displayed? false)

      (when (= (Math.floor (/  this.cursor this.page-size)) this.page)

        (assign c.displayed? true)
        (each c.entity.aspects (a)
              (const c* (get c.entity a.interface.name))
              (when c*.update-view?
                (.append c.view c*.view)))
        (.render c.view this.view))
      (incr this.cursor)))
  (def *cleanup ()
    (assign this.updated? false)
    )
  )
(export View-panel)
(export Property-view)
