
(require! (lit Component System) "@shared/ecs.js"
          config "@obstacles/config.js"
          )

(define Time-limit Component
  (doc-string "Obstacles.systems.Time-limit"
              "Inherits shared.ecs.Component arguments"
              "Sets somthing to happen at a given time."
              "Requires a " (pre duration) "and" (pre callback))
  (def register () (assign this.created-at (Date.now)))
  (gett duration (throw (new Error "no duration was given to time limit component")))
  (gett callback (throw (new Error "No callback was given to time limit component")))
  (gett elapsed (- (Date.now) this.created-at))
  (gett remaining-time (- this.duration this.elapsed))
  (gett expired (> 0 this.time-remaining )))
(define Timer System
  (doc-string "Obstacles.systems.Timer"
              "Inherits from shared.ecs.ComponentSystem"
              "Allows timed events to occur for entities with time limit components")

  (def *update-component (c)
    (when (and c.expired (not c.triggered))
      (c.callback c.entity)
      (assign c.triggered true))
    (when c.refresh
      (assign c.created-at (Date.now))
      (assign c.triggered false)))
