
(require! (lit Component System) "@shared/ecs.js"
          (lit Binary-search-tree) "@shared/data-structures/trees/binary-search-tree.js"
          config "@obstacles/config.js"
          )

(define Time-limit Component
  (doc-string "Obstacles.systems.Time-limit"
              "Inherits shared.ecs.Component arguments"
              "Sets somthing to happen at a given time."
              "Requires a " (pre duration) "and" (pre callback))

  (def register ()
    (assign this.created-at (Date.now))
    (assign this.triggered false)
    (.set this.system.tree this.trigger-time this)
    )

  (gett duration (throw (new Error "no duration was given to time limit component")))
  (gett callback (throw (new Error "No callback was given to time limit component")))
  (gett trigger-time (+ this.created-at this.duration))

  (gett elapsed (- (Date.now) this.created-at))
  (gett remaining-time (- this.duration this.elapsed))
  (gett expired (> this.elapsed this.duration))

  (def reset ()
    (.remove this.system.tree this.trigger-time this)
    (assign this.created-at (Date.now))
    (assign this.triggered false)
    (.set this.system.tree this.trigger-time this))
  (def *clear ()
    (assign this.created-at 0)
    (assign this.triggered false)
    (.remove this.system.tree this.trigger-time this)))

(export Time-limit)

(define Timer System
  (doc-string "Obstacles.systems.Timer"
              "Inherits from shared.ecs.ComponentSystem"
              "Allows timed events to occur for entities with time limit components")
  (def register ()
    (assign this.tree (.spawn Binary-search-tree)))
  (def *update-all ()
    (const branch  (.search this.tree (Date.now)))
    (const list branch.values)
    ;; (print this.tree branch list)
    (each list (c)
          (.*update-component this c)))
  (def *update-component (c)
    (when (and c.expired (not c.triggered))
      (assign c.triggered true)
      (c.callback c.entity c))))

(export Timer)
