(require! (lit Velocity) "@shared/systems/velocity.js")
(require! (lit Position) "@shared/systems/position.js")
(require! (lit game) "@obstacles/game.js"
          config "@obstacles/config.js"
          (lit Physics) "@shared/systems/physics/system.js"
          (lit create-particle-updater) "@shared/field.js"

          (lit  random-location next-spawn spawn-ant ants
                home home-pos next-spawn plants rocks spawn-plant spawn-rock rock-gen-step )
          "@obstacles/entities.js"

          (lit random-location) "@obstacles/location.js"
          )


(const update-particle (create-particle-updater config game))

(do-times config.rocks (rock-gen-step ))


(do-times config.starting-plants (spawn-plant (random-location)
                                              (random-float config.plant-mass-limit)))


(on game.events 'tick ()
    (next-spawn game)

    ;; (ants.group.each (=> (ant)
    ;;                      (var v (.get game.systems Velocity ant))
    ;;                      (update-particle v v.pos, Signal-field.field,
    ;;                                       Signal-field.layer
    ;;                                       game.ticker.ticks
    ;;                                       true
    ;;                                       false
    ;;                                       home-pos)
    ;;                      null))
    (if (mod game.ticker.ticks 10)
        (plants.group.each (=> (plant)
                               (var physics (.get game.systems Physics plant))
                               (if (>= 0 physics.mass)
                                   (do (.despawn plants plant))
                                   (do
                                    (const x (+ physics.mass (* (Math.random) 10 config.growthRate)))
                                    (set physics 'mass x)
                                    (set physics 'scale x)

                                     (when (> physics.mass config.plantMassLimit)

                                       (const x (/ physics.mass 2))

                                       (set physics 'mass x)
                                       (set physics 'scale x)

                                       (const plant* (spawn-plant [(+ (random-signed physics.scale) physics.position.x)
                                                                   (+ (random-signed physics.scale) physics.position.y)]
                                                                  physics.mass))
                                       (const physics* (.get game.systems Physics plant*))
                                       (const vx (random-signed config.spawn-static) )
                                       (const vy (random-signed config.spawn-static))
                                       (.accelerate physics.velocity [vx vy])
                                       (.accelerate physics*.velocity [(* -1 vx) (* -1 vy)])
                                       ;; (spawn-plant [(+ (random-signed (* config.spawn-static physics.scale)) physics.position.x)
                                       ;;               (+ (random-signed (* config.spawn-static physics.scale)) physics.position.y)]
                                       ;;              physics.mass)
                                       )))
                               null))))
