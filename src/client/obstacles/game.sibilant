(namespace vector-ants)
(include "kit/header" )
(import-namespace kit)
(include "kit-interface/header" )
(import-namespace interface)


(set global
     'mixin mixin
     'create create)

(include "kit-html/src/dom")


(require! (lit Rendering) "sibilant-game-engine/client/systems/rendering/rendering"
          (lit Game) "sibilant-game-engine/client/game"
          (lit Dot) "sibilant-game-engine/client/systems/rendering/dot"
          (lit Position) "sibilant-game-engine/client/systems/position"
          (lit Velocity) "sibilant-game-engine/client/systems/velocity"
          (lit Physics) "sibilant-game-engine/client/systems/physics"
          (lit Collision) "./collision"

          config "./config"
          )

(import-namespace dom)

(def-lit-macro def-curried (name args ...body) `(property @name (R.curry (lambda @args ...@body))))

(def-lit-macro define (name parent ...body)
               `(property @name
                          (.define @parent (quote @name)
                                   (lit ...@body))))

(include "../../../inc/rand.sibilant")
(const rendering (.load Rendering
                        (lit (dimensions [(* 1 (first config.dimensions))
                                          (* 1 (second config.dimensions))])
                             (blend true))))

(var stage (dom (.div .id 'stage )))


(var container (dom (.div .id "container" rendering.context.canvas)))
(with-dom Document-root (.div .id 'frame container))

(var active-game-systems [Dot Position Physics Velocity Collision])

(var game ((create Game)
           rendering
           active-game-systems
           config.game-speed))

(set rendering 'background-color
     (lit (r 255) (g 255) (b 255) (a 255)))


(export game)
(export active-game-systems)

