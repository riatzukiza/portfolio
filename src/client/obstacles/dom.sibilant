(namespace obstacles)
(include "kit/header" )
(import-namespace kit)

(include "../../../inc/dom.sibilant")
(import-namespace dom)

(require! (lit rendering ) "@obstacles/rendering.js"
          (lit ants rocks plants) "@obstacles/entities.js"
          (lit game) "@obstacles/game.js"
          (lit vector-pool trail-pool) "@shared/vectors.js"

          (lit Physics) "@shared/systems/physics/index.js"
          (lit Dot) "@shared/systems/rendering/dot.js"
          (lit Rock-panel) "@obstacles/dom/rocks.js"
          config "@obstacles/config.js"
          )


(def-generic display-decimal (d (n 6)) (/ (Math.round (* (Math.pow 10 n) d)) (Math.pow 10 n)))


(print "We got this from dom" (lit game))

(print "tick")

(const game-view (dom (.div .id "game-view" .className "panel" rendering.context.canvas)))
(const debug-view (dom (.div .id "debug-view" .className "panel"
                             .style (lit (height (+  (second config.dimensions)"px"))
                                         (width (+ (Math.round (- (* window.innerWidth 0.2) 24)) "px"))
                                         ("overflow-y" "scroll")
                                         )
                             )))



(var container (dom (.div .id "container"
                          game-view
                          debug-view
                          )))
(with-dom Document-root (.div .id 'frame container))
(def start-interface ()
  ;; (on game.events 'tick (t)

  ;;     (when (= (mod t 300) 0)

  ;;       (var ant-mass 0)
  ;;     (var ant-wins 0)
  ;;     (var ant-losses 0)

  ;;     (each ants.group (ant)
  ;;           (incr-by ant-mass (get (.get game.systems Physics ant) 'mass)))

  ;;     (each ants.group (ant)
  ;;           (incr-by ant-wins (or (get (.get game.systems Physics ant) 'velocity 'win-count) 0)))

  ;;     (each ants.group (ant)
  ;;           (incr-by ant-losses (or (get (.get game.systems Physics ant) 'velocity 'loose-count) 0)))
  ;;     (const ant-mass-raw (.split (.to-precision ant-mass 12) "."))
  ;;     ;; (const ant-mass-int (first ant-mass-raw ))
  ;;     ;; (const ant-mass-decimal (.slice (second ant-mass-raw) 0 4))
  ;;     ;; (const ant-mass-string (+ ant-mass-int "." ant-mass-decimal))
  ;;     (const rock-views [])
  ;;     (each rocks.group (rock)
  ;;           (const phys (.get game.systems Physics rock))
  ;;           (const dot (.get game.systems Dot rock))
  ;;           (const pos phys.position)
  ;;           (rock-views.push (.spawn Rock-panel rock)))

  ;;     (.clear debug-view)
  ;;     (with-dom debug-view
  ;;       (.div ;; (.div "ticks:" t)
  ;;             (.div .className "panel "(.h3 "Ants")
  ;;                   (.div "count:" ants.size)
  ;;                   (.div "total mass:" (.to-fixed (/ (Math.round (* 1000 ant-mass)) 1000) 4))
  ;;                   (.div "total wins:" ant-wins)
  ;;                   (.div "total losses:" ant-losses)
  ;;                   (.div "win/loss:" (display-decimal (/ ant-wins ant-losses))))
  ;;             (.div .className "panel" (.h3 "Rocks")
  ;;                   rock-views)
  ;;             (.div .className "panel" (.h3 "Pools")
  ;;                   (.div "vector buckets"
  ;;                         vector-pool.buckets.length)
  ;;                   (.div "trail buckets"
  ;;                         trail-pool.buckets.length)
  ;;                   )
  ;;             (.div "plants:" plants.size)
  ;;             (.div "rocks:" rocks.size)))))
  )

(export start-interface)


