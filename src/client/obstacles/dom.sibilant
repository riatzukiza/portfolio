(namespace obstacles)

(include "../../../inc/dom.sibilant")
(import-namespace dom)

(require! (lit rendering ) "@obstacles/rendering.js"
          (lit ants rocks plants trail-segments) "@obstacles/entities.js"
          (lit game) "@obstacles/game.js"
          (lit Signal-field) "@obstacles/forces.js"
          (lit vector-pool trail-pool) "@shared/vectors.js"
          (lit Physics) "@shared/systems/physics/index.js"
          (lit Dot) "@shared/systems/rendering/dot.js"
          (lit summate) "@shared/math/math.js"
          (lit View-panel Property-view) "@obstacles/systems/property-view.js"
          config "@obstacles/config.js"
          )


(def-generic display-decimal (d (n 6)) (/ (Math.round (* (Math.pow 10 n) d)) (Math.pow 10 n)))


(print "We got this from dom" (lit game))

(print "tick")
(macro sum-of (reducable ...keys) `(.reduce @reducable  (=> ( sum el) (+ sum (or (get el ...@keys) 0))) 0))

(const game-view (dom (.div .id "game-view" .className "panel"
                            .style (lit ("background-color" "sandyBrown"))
                            rendering.context.canvas)))
(const get-total-ant-mass (-> (display-decimal (sum-of ants.group 'physical-properties 'mass))))
(const get-ant-count (-> ants.size))
(const get-wins (-> (sum-of ants.group 'ant-life 'win-count)))
(const get-losses (-> (sum-of ants.group 'ant-life 'loose-count)))
(const get-stats (->
                  (const wins (get-wins))
                  (const losses (get-losses))

                  [(dom (.div "Ants"))
                   (dom (.div "count:" get-ant-count))
                   (dom (.div "elapsed:" game.ticker.elapsed))
                   (dom (.div "total mass:" get-total-ant-mass))
                   (dom (.div "wins:" (display-decimal wins)))
                   (dom (.div "losses:" (display-decimal losses)))
                   (dom (.div "win/loss:" (display-decimal (/ wins losses))))]))
(const stats (dom (.div .className "panel" get-stats)))
(const get-vector-bucket-count (-> vector-pool.buckets.length))
(const get-trail-bucket-count (-> trail-pool.buckets.length))
(const pools-view
       (dom (.div .className "panel" (.h3 "Pools")
                  (.div "vector buckets" get-vector-bucket-count)
                  (.div "trail buckets" get-trail-bucket-count))))


(const reset-button (dom (.button .onclick (->
                                            (.clear rocks)
                                            (.clear ants)
                                            (.clear plants)
                                            ;; These get cleared when the ant clears it's ant trail component.
                                            ;; (.clear trail-segments)
                                            (each (get (.get-by-symbol game.systems Physics.symbol) 'forces) (force)
                                                  (.reset f))
                                            ) "Reset")))
(const debug-view
       (dom (.div .id "debug-view" .className "panel"
                  .style (lit (height (+  (second config.dimensions)"px"))
                              (width (+ (Math.round (- (* window.innerWidth 0.2) 24)) "px"))
                              ("overflow-y" "scroll"))
                  reset-button
                  stats
                  pools-view)))




(var container (dom (.div .id "container"
                          game-view
                          debug-view
                          )))
(export container)
(export game-view)
(export debug-view)
(with-dom Document-root (.div .id 'frame container))
(def start-interface ()
  (on game.events 'tick (t)

      (when (= (mod t config.ui-polling-rate) 0)
        (.render stats)
        (.render pools-view))))

(export start-interface)


