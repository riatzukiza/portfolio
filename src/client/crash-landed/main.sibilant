(namespace crash-landed)

(include "kit/header" )
(import-namespace kit)

(include "kit-interface/header" )
(import-namespace interface)

(include "../../../inc/rand.sibilant")
(include "../../../inc/misc.sibilant")
(include "../../../inc/docs.sibilant")
(import-namespace docs)

(set global 'mixin mixin 'create create)

(require! (lit game active-game-systems ) "@crash-landed/game.js")
(require! (lit start-interface) "@crash-landed/dom.js"

          (lit Physics) "@shared/systems/physics/index.js"
          (lit Friction) "@crash-landed/forces.js"
          (lit Position) "@shared/systems/position.js"
          (lit Velocity) "@shared/systems/velocity.js"
          (lit Player-sprites) "@crash-landed/systems/sprites/player.js"
          (lit Floor-sprites) "@crash-landed/systems/sprites/floor.js"
          (lit Cliff-sprites) "@crash-landed/systems/sprites/cliff.js"
          (lit Sight) "@crash-landed/systems/sight.js"
          (lit Tile-visibility) "@crash-landed/systems/visibility.js"
          (lit Path-finding) "@crash-landed/systems/path-finding.js"
          (lit Ground-types) "@crash-landed/systems/floor-type.js"
          (lit Entity-group) "@shared/ecs/entity-group.js"
          (lit Vector) "@shared/vectors.js"
          (lit Trie) "@shared/data-structures/trees/trie.js"
          noise "@shared/noise.js"
          config "@crash-landed/config.js"
          )



(print config.dimensions)
(require! (lit Tile-graph Tile-node) "@shared/tiles.js")

(assign Velocity.real-time? false)



(.start game)

(const game-scale 128)
(const tiles (.spawn Tile-graph game-scale
                     [
                      Floor-sprites
                      Cliff-sprites
                      Tile-visibility
                      Ground-types
                      ] game))

(const player ((create Entity-group)"player" [Position Player-sprites Physics Velocity  Sight Path-finding] game.ent))

(const p (.spawn player))

(assign p.position-interface.x 300)
(assign p.position-interface.y 300)
(const v p.velocity-interface.vector)
(assign p.physical-properties.scale game-scale)
(.select-sequence p.player-sprite "east")
(const eigth-turn (/ (* Math.PI 2) 8))
(const east 0)
(const south-east eigth-turn)
(const south (* eigth-turn 2))
(const south-west (* eigth-turn 3))
(const west (* eigth-turn 4))
(const north-west (* eigth-turn 5))
(const north (* eigth-turn 6))
(const north-east (* eigth-turn 7))


(assign Position.wraps? false)
;; (.set-length v 256)
;; (.set-angle v east)
(print (.get-angle v))

(const directions [ east south-east south south-west west north-west north north-east])
(const direction-names  [ 'east 'south-east 'south 'south-west 'west 'north-west 'north 'north-east] )

(def get-cardinal-direction (vector)
  (const angle (.get-angle vector))
  (get directions (mod (Math.abs (Math.round (/ angle eigth-turn))) 8))
  )


(define direction-actions Interface
  (north [0 1])
  (north-east [1 1])
  (east [1 0])
  (south-east [1 -1])
  (south [0 -1])
  (south-west [ -1 -1 ])
  (west [-1 0])
  (north-west [-1 1])
       )

(def get-cardinal-direction-name (vector)
  (const angle (.get-angle vector))
  (const i  (mod (Math.abs (Math.round (/ angle eigth-turn))) 8))
  (get direction-names i))


(Sight.register-tile-graph tiles)

(def-generic get-tile-noise (x y (z config.noise-z) (angle-zoom config.angle-zoom)(force 16) (v (.spawn Vector 1 1)))
  (.set-angle v
              (* (noise.simplex3 (/ x angle-zoom 5)
                                 (/ y angle-zoom 5)
                                 (/ z 10000))
                 Math.PI 2))
  (const length (noise.simplex3 (+ (/ x 50)
                                   40000)
                                (+ (/ x 50)
                                   40000)
                                (/ z 10000)))
  (.set-length v (* length force))
  v)
(def-generic get-move-noise (x y t (force 16) (v (.spawn Vector 1 1)))
  (.set-angle v
              (* (noise.simplex3 (/ x config.angle-zoom 5)
                                 (/ y config.angle-zoom 5)
                                 (* t (/ config.noise-z 10000)))
                 Math.PI 2))
  (const length (noise.simplex3 (+ (/ x 50)
                                   40000)
                                (+ (/ x 50)
                                   40000)
                                (* t (/ config.noise-z 10000))))
  (.set-length v (* length force))
  v)

(const visited (new Set))
(const cell-types ['grass 'flowery-grass  'grass 'flowery-grass  'grass 'flowery-grass  'grass 'flowery-grass 'grass 'grass  'broken-stone 'stone 'stone 'broken-stone])
(define Tile-chunk Interface
  (directions [

               ['north-west 0]
               ['north 1]
               ['north-east 2]
               ['west 3]
               ['center 4]
               ['east 5]
               ['south-west 6]
               ['south 7]
               ['south-east 8]])
  (chunks [])
  (weight 1)
  (define indexes Interface
    (north-west 0)
    (north 1)
    (north-east 2)
    (west 3)
    (center 4)
    (east 5)
    (south-west 6)
    (south 7)
    (south-east 8))

  (init ((data [])
         (weight 1)
         )
        (.push this.chunks this)
        )

  (def create (weight (dots data)) ((create Tile-chunk) data weight))
  (def get (direction) (get this.data (get this.indexes direction)))

  (def-generic each (f data directions)
    (each directions (dir i)
          (f (get data (second dir)) (first dir) i)))
  (def-generic every (f data directions)
    (.every directions (=> (dir i)
                           (f (get data (second dir)) (first dir) i)))
    )
  )
  
;; (const chunk-types ['field 'road-vertical 'road-horizontal 'road-4-way-intersction 'road-3-way-intersection])

(const road-weight 1.0)
(const turn-weight 0.1)
(const adjacent-stone-weight -10)
(const paralell-horizontal-roads (.create Tile-chunk adjacent-stone-weight
                               'stone 'stone 'stone
                               'grass 'grass 'grass
                               'stone 'stone 'stone))
(const paralell-vertical-roads (.create Tile-chunk adjacent-stone-weight
                                        'stone 'grass 'stone
                                        'stone 'grass 'stone
                                        'stone 'grass 'stone
                                          ))
(const full-stone (.create Tile-chunk adjacent-stone-weight
                                        'stone 'stone 'stone
                                        'stone 'stone 'stone
                                        'stone 'stone 'stone
                                        ))
(const horizontal-road
       ((create Tile-chunk)
        [ 'grass 'grass 'grass
           'stone 'stone 'stone
            'grass 'grass 'grass]))
(assign horizontal-road.weight road-weight)

(const grass-below-road ((create Tile-chunk)
  [
   'stone 'stone 'stone
   'grass 'grass 'grass
   'grass 'grass 'grass
   ]))
(assign grass-below-road.weight road-weight)
(const grass-above-road ((create Tile-chunk)
  [
   'grass 'grass 'grass
   'grass 'grass 'grass
   'stone 'stone 'stone
   ]))
(assign grass-above-road.weight road-weight)

(const flowers-below-road ((create Tile-chunk)
  [
   'stone 'stone 'stone
   'grass 'grass 'grass
   'flowery-grass 'flowery-grass 'flowery-grass
   ]))
(assign flowers-below-road.weight road-weight)
(const flowers-above-road ((create Tile-chunk)
  [
   'flowery-grass 'flowery-grass 'flowery-grass
   'grass 'grass 'grass
   'stone 'stone 'stone
   ]))
(assign flowers-above-road.weight road-weight)

;; ((create Tile-chunk)
;;  [
;;   'stone 'stone 'stone
;;   'stone 'stone 'stone
;;   'grass 'grass 'grass
;;   ])
;; ((create Tile-chunk)
;;  [
;;   'grass 'grass 'grass
;;   'stone 'stone 'stone
;;   'stone 'stone 'stone
;;   ])
;; ((create Tile-chunk)
;;  [
;;   'stone 'stone 'stone
;;   'stone 'stone 'stone
;;   'stone 'stone 'stone
;;   ])

(const vertical-road
       ((create Tile-chunk)
        [
          'grass 'stone 'grass
          'grass 'stone 'grass
          'grass 'stone 'grass
           ]))
(assign vertical-road.weight road-weight)
(const grass-on-right-of-road ((create Tile-chunk)
  [
   'stone 'grass  'grass
   'stone 'grass  'grass
   'stone 'grass  'grass
   ]))
(assign grass-on-right-of-road.weight road-weight)

(const grass-on-left-of-road ((create Tile-chunk)
  [
   'grass  'grass  'stone
   'grass  'grass  'stone
   'grass  'grass  'stone
   ]))

(assign grass-on-left-of-road.weight road-weight)

(const flowers-on-right-of-road ((create Tile-chunk)
  [
   'stone 'grass  'flowery-grass
   'stone 'grass  'flowery-grass
   'stone 'grass  'flowery-grass
   ]))
(assign flowers-on-right-of-road.weight road-weight)

(const flowers-on-left-of-road ((create Tile-chunk)
  [
   'flowery-grass  'grass  'stone
   'flowery-grass  'grass  'stone
   'flowery-grass  'grass  'stone
   ]))

(assign flowers-on-left-of-road.weight road-weight)

;; ((create Tile-chunk)
;;  [
;;   'stone 'stone  'grass
;;   'stone 'stone  'grass
;;   'stone 'stone  'grass
;;    ])

;; ((create Tile-chunk)
;;  [
;;   'grass  'stone  'stone
;;   'grass  'stone  'stone
;;   'grass  'stone  'stone
;;   ])
;; ((create Tile-chunk)
;;  [
;;   'grass  'grass  'stone
;;   'grass  'stone  'stone
;;   'grass  'grass  'stone
;;   ])
;; ((create Tile-chunk)
;;  [
;;   'stone  'grass  'grass
;;   'stone  'stone  'grass
;;    'stone  'grass  'grass
;;   ])
;; ((create Tile-chunk)
;;  [
;;   'grass  'grass  'grass
;;   'stone  'grass  'grass
;;   'grass  'grass  'grass
;;   ])
;; ((create Tile-chunk)
;;  [
;;   'grass  'grass  'grass
;;   'stone  'grass  'grass
;;   'grass  'grass  'grass
;;   ])
;; ((create Tile-chunk)
;;  [
;;   'grass  'grass  'grass
;;   'grass  'stone  'stone
;;   'grass  'grass  'grass
;;   ])
;; ((create Tile-chunk)
;;  [
;;   'grass  'grass  'grass
;;   'grass  'grass  'stone
;;   'grass  'grass  'grass
;;   ])
;; ((create Tile-chunk)
;;  [
;;   'grass  'stone  'grass
;;   'grass  'stone  'grass
;;   'grass  'grass  'grass
;;   ])
;; ((create Tile-chunk)
;;  [
;;   'grass  'stone  'grass
;;   'grass  'grass  'grass
;;   'grass  'grass  'grass
;;   ])
;; ((create Tile-chunk)
;;  [
;;   'grass  'grass  'grass
;;   'grass  'grass  'grass
;;   'grass  'stone  'grass
;;   ])
;; ((create Tile-chunk)
;;  [
;;   'grass  'grass  'grass
;;   'grass  'grass  'stone
;;   'grass  'grass  'stone
;;   ])
;; ((create Tile-chunk)
;;  [
;;   'grass  'grass  'grass
;;   'grass  'grass  'grass
;;   'grass  'grass  'stone
;;   ])
;; ((create Tile-chunk)
;;  [
;;   'grass  'grass  'stone
;;   'grass  'grass  'stone
;;   'grass  'grass  'grass
;;   ])
;; ((create Tile-chunk)
;;  [
;;   'stone  'grass  'grass
;;   'stone 'grass  'grass
;;   'grass  'grass  'grass
;;   ])
;; ((create Tile-chunk)
;;  [
;;   'grass  'grass  'grass
;;   'grass 'stone  'grass
;;   'grass  'grass  'grass
;;   ])
;; ((create Tile-chunk)
;;  [
;;   'stone  'grass  'grass
;;   'grass 'grass 'grass
;;   'grass  'grass  'grass
;;   ])
;; ((create Tile-chunk)
;;  [
;;   'grass  'grass  'grass
;;   'grass 'grass  'grass
;;   'stone  'grass  'grass
;;   ])
;; (const left-diagonal-road
;;        ((create Tile-chunk)
;;         [ 'stone 'grass 'grass
;;            'grass 'stone 'grass
;;            'grass 'grass 'stone]))
;; (const right-diagonal-road
;;        ((create Tile-chunk)
;;         [ 'grass 'grass 'stone
;;            'grass 'stone 'grass
;;            'stone 'grass 'grass]))


(const cross-roads
       ((create Tile-chunk)
        [ 'grass 'stone 'grass
           'stone 'stone 'stone
           'grass 'stone 'grass ]))
(assign cross-roads.weight 0.1)




;; (const diagonal-crossroad
;;        ((create Tile-chunk)
;;         [ 'stone 'grass 'stone
;;            'grass 'stone 'grass
;;            'stone 'grass 'stone]))


(const north-east-turn ((create Tile-chunk)
                        [  'grass 'grass 'grass
                           'grass 'stone 'stone
                           'grass 'stone 'grass]))
;; ((create Tile-chunk)
;;  [  'grass 'grass 'grass
;;      'grass 'stone 'stone
;;      'grass 'stone 'stone])
(assign north-east-turn.weight turn-weight)

(const wide-north-east-turn ((create Tile-chunk) [ 
                                                  'stone 'stone 'stone
                                                  'stone 'grass 'grass
                                                  'stone 'grass 'grass]))

(assign wide-north-east-turn.weight turn-weight)

(const north-west-turn ((create Tile-chunk) [ 
                                             'grass 'grass 'grass
                                             'stone 'stone 'grass
                                             'grass 'stone 'grass]))

(assign north-west-turn.weight turn-weight)

(const wide-north-west-turn ((create Tile-chunk) [ 
                                                  'stone 'stone 'stone
                                                  'grass 'grass 'stone
                                                  'grass 'grass 'stone]))

(assign wide-north-west-turn.weight turn-weight)
((create Tile-chunk) [ 
                      'grass 'grass 'grass
                      'stone 'stone 'grass
                      'stone 'stone 'grass])

(const south-west-turn ((create Tile-chunk) [ 
                                             'grass 'stone 'grass
                                             'stone 'stone 'grass
                                              'grass 'grass 'grass]))


(assign south-west-turn.weight turn-weight)
(const wide-south-west-turn ((create Tile-chunk) [
                                             'grass 'grass 'stone
                                             'grass 'grass 'stone
                                             'stone 'stone 'stone]))
(assign wide-south-west-turn.weight turn-weight)
(const lone-stone-weight -1)
(.create Tile-chunk lone-stone-weight
         'grass 'grass 'grass
         'grass 'stone 'grass
         'grass 'grass 'grass)
(.create Tile-chunk lone-stone-weight
         'grass 'stone 'grass
         'grass 'grass 'grass
         'grass 'grass 'grass)
(.create Tile-chunk lone-stone-weight
         'stone 'grass 'grass
         'grass 'grass 'grass
         'grass 'grass 'grass)
(.create Tile-chunk lone-stone-weight
         'grass 'grass 'grass
         'stone 'grass 'grass
         'grass 'grass 'grass)
(.create Tile-chunk lone-stone-weight
         'grass 'grass 'grass
         'grass 'grass 'grass
         'stone 'grass 'grass)
(.create Tile-chunk lone-stone-weight
         'grass 'grass 'grass
         'grass 'grass 'grass
         'grass 'stone 'grass)
(.create Tile-chunk lone-stone-weight
         'grass 'grass 'grass
         'grass 'grass 'grass
         'grass 'grasss 'stone)
(.create Tile-chunk lone-stone-weight
         'grass 'grass 'grass
         'grass 'grass 'stone
         'grass 'grasss 'grass)
(.create Tile-chunk lone-stone-weight
         'grass 'grass 'stone
         'grass 'grass 'grass
         'grass 'grasss 'grass)
(const road-end-stone-weight -1)
(.create Tile-chunk  road-end-stone-weight
         'grass 'stone 'grass
         'grass 'stone 'grass
         'grass 'grass 'grass)
(.create Tile-chunk  road-end-stone-weight
         'grass 'grass 'grass
         'grass 'stone 'grass
         'grass 'stone 'grass)

(.create Tile-chunk  road-end-stone-weight
         'grass 'grass 'grass
         'stone 'stone 'grass
         'grass 'grass 'grass)
(.create Tile-chunk  road-end-stone-weight
         'grass 'grass 'grass
         'grass 'stone 'stone
         'grass 'grass 'grass)


;; (const broken-vertical-road ((create Tile-chunk)
;;                    [ 'grass 'stone 'grass
;;                       'grass 'grass 'grass
;;                       'grass 'stone 'grass]
;;                    ))
;; (const brokwn-horizontal-road ((create Tile-chunk)
;;                                [ 'grass 'grass 'grass
;;                                   'grass 'stone 'grass
;;                                   'grass 'grass 'grass]
;;                                ))
;; (assign lone-stone.weight turn-weight)
;; ((create Tile-chunk) [ 
;;                       'stone 'stone 'grass
;;                       'stone 'stone 'grass
;;                       'grass 'grass 'grass])
(const south-east-turn ((create Tile-chunk) [ 
                                             'grass 'stone 'grass
                                             'grass 'stone 'stone
                                             'grass 'grass 'grass]))
;; ((create Tile-chunk) [ 
;;                       'grass 'stone 'stone
;;                       'grass 'stone 'stone
;;                       'grass 'grass 'grass])
(assign south-east-turn.weight turn-weight)

(const field ((create Tile-chunk)
              [ 'grass 'grass 'grass
                 'grass 'grass 'grass
                 'grass 'grass 'grass]))

(assign field.weight 1.1)
(const meadow ((create Tile-chunk)[ 'flowery-grass 'flowery-grass 'flowery-grass
                                     'flowery-grass 'flowery-grass  'flowery-grass
                                     'flowery-grass 'flowery-grass 'flowery-grass]))

(assign meadow.weight 1.1)
(const grassy-meadow
       ((create Tile-chunk)
        [ 'grass 'flowery-grass 'grass
           'flowery-grass 'grass 'flowery-grass
           'grass 'flowery-grass 'grass]))
(assign grassy-meadow.weight 1.1)
(const other-grassy-meadow ((create Tile-chunk)
                            [ 'flowery-grass 'grass 'flowery-grass
                              'grass 'flowery-grass 'grass
                              'flowery-grass 'grass 'flowery-grass]))

(assign other-grassy-meadow.weight 1.1)
(const lone-flower ((create Tile-chunk)
                    [ 'grass 'grass 'grass
                       'grass 'flowery-grass 'grass
                       'grass 'grass 'grass]))

(assign lone-flower.weight 2.1)




(var next-type 0)
(var is-first-tile? true)

;; (define chances Interface
;;   (grass 0)
;;   (stone 0)
;;   (flowery-grass 0)
;;   )
(define base-weights Interface
  (grass 1000)
  (stone 0.1)
  (flowery-grass 100)
  )

(const weights (.spawn Trie))
(def get-tile-weight (base-weight tile-type)
  )
(define Possible-state Interface

  (init (configuration
         (collapsed-state null)
         (is-possible? true)
         (weight 0)))
  (def-generic test (tile configuration)
    (and (.every configuration (=> (tile-type direction)
                               (if (= direction 'center)
                                   (set this
                                        'collapsed-state tile-type
                                        'weight (+ this.weight
                                                   (* configuration.weight
                                                      (get base-weights tile-type))))
                                   (= (get tile direction 'entity 'ground 'type)
                                      tile-type)
                                   (incr-by this.weight
                                            (* configuration.weight
                                               (get base-weights tile-type)))
                                   (not (get tile direction 'entity 'ground 'type))
                                   true
                                   (!= (get tile direction 'entity 'ground 'type)
                                       tile-type)
                                   false)))
         (> this.weight 10)
         )))
(def-generic Tile-node.collapse-wave-function ( (depth 0) (max-depth 2))
  (const possible-states [])
  ;; (print (lit max-depth))
  (for-of! chunk-type Tile-chunk.chunks
           (const possibility ((create Possible-state)
                               chunk-type
                               
                               ))
           (if! (.test possibility this)
                ;; (if (not possibility.collapsed-state) (throw (new Error "Collapsed to null")))
                ;; (if (> 10 possibility.weight) (throw (new Error "Collapsed improbable state")))

                ;; (print possibility.weight possibility.collapsed-state)

                (.push possible-states possibility))
           
           )
  (define choices Interface
    (grass 0)
    (stone 0)
    (flowery-grass 0)
    )

  (if (= possible-states.length 1)
      (first possible-states)
      (= possible-states.length 0)
      (return false)
      (and (> possible-states.length 1)
           (!= max-depth depth))
      (do
       (var result null)
       (for-of! state possible-states
                (const unconfigured-neigbors [])
                (const is-valid?
                       (.every state.configuration
                               (=> (tile-type direction)
                                   (const neighbor (get this direction ))
                                   (if (= direction 'center)
                                       true
                                       (not neighbor.entity.ground.type)
                                       (do (.push unconfigured-neigbors neighbor)
                                         (const collapsed-state (neighbor.collapse-wave-function (+ depth 1)))
                                        collapsed-state)
                                       true))))
                (for-of! neighbor unconfigured-neigbors
                         (assign neighbor.entity.ground.type null))
                (if! is-valid?
                     (assign result state)
                     break
                     ))
        (return result))
      (do
       (.reduce possible-states (=> (most-likely state)
                                    (incr-by (get choices state.collapsed-state)
                                             state.weight
                                             )
                                    (if (> (get choices state.collapsed-state)
                                           (get choices most-likely.collapsed-state))
                                        state
                                        most-likely))))))
(def-generic Tile-node.setup (x y)
  (const v (get-tile-noise x y))

  ;; seed the options
  (if is-first-tile?
      (do (assign is-first-tile? false)
          (each cross-roads (tile-type direction)
                (print "initializing first chunk" tile-type direction)
                (if (= direction 'center)
                    (assign this.entity.ground.type tile-type)
                    (set (get this direction 'entity 'ground)
                         'type tile-type)))
        )
      (not this.entity.ground.type)
      (do

       (const collapsed-state (.collapse-wave-function this))
       (const choice (if collapsed-state
                         collapsed-state.collapsed-state
                         ;; 'grass
                         'flowery-grass
                         ;; (get ['flowery-grass 'grass 'stone 'grass 'grass 'grass 'grass]
                         ;;      (random-int 7)
                         ;;      )
                         ))
        (assign this.entity.ground.type choice)))


  
  (const x* (mod (Math.abs (Math.round v.x) ) 4))
  (const y* (mod (Math.abs (Math.round v.y) ) 4))

  ;; (const x* 1)
  ;; (const y* 1)
  (const coords [(+ x* this.entity.ground.stats.sprite-coord-min-x)
                 (+ y* this.entity.ground.stats.sprite-coord-min-y)
                 ])

  (.select-tile this.entity.floor-sprite
                (dots coords)
                )


  (.despawn v))

(set p.physical-properties
     'forces [])


(assign Path-finding.tiles tiles)
(on game.events 'tick (t)

    (const pos p.position-interface)
    (if (= (mod t 10) 0) (.step p.player-sprite))
    ;; (print 'tick t pos.vector v p.current-path)
    (unless p.current-path.node-list

      (var new-x pos.x)
      (var new-y pos.y)
      (until p.current-path.end
             (const noise-v (get-move-noise pos.x pos.y t (* 1.0 game-scale)))

             (assign new-x (+ new-x (*  20 noise-v.x)))
             (assign new-y (+ new-y (*  20 noise-v.y)))

             (const possible-end (.get-closest-from-world-pos tiles new-x new-y))
             (unless possible-end.entity.visible-status.explored?
               (assign p.current-path.start
                       (.get-closest-from-world-pos tiles pos.x pos.y))
               (assign p.current-path.end
                       possible-end))

             (.despawn noise-v))

      ;; (print "finding new path"
      ;;        p.current-path.start
      ;;        p.current-path.end)
      )
    (const direction-name (get-cardinal-direction-name v))
    (.select-sequence p.player-sprite direction-name)


    )


(start-interface)

