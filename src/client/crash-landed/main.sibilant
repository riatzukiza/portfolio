(namespace crash-landed)


(include "kit/header" )
(import-namespace kit)

(include "kit-interface/header" )
(import-namespace interface)

(include "../../../inc/rand.sibilant")
(include "../../../inc/misc.sibilant")
(include "../../../inc/docs.sibilant")
(import-namespace docs)

(set global 'mixin mixin 'create create)

(require! (lit game active-game-systems ) "@crash-landed/game.js")
(require! (lit start-interface) "@crash-landed/dom.js"
          (lit Position) "@shared/systems/position.js"
          (lit Sight) "@crash-landed/systems/sight.js"
          (lit  player) "@crash-landed/units.js"
          (lit get-cardinal-direction-name) "@crash-landed/directions.js"
          (lit generate-main-road) "@crash-landed/world-gen.js"
          (lit tiles) "@crash-landed/tiles.js"
          (lit Path-finding) "@crash-landed/systems/path-finding.js"
          (lit Velocity) "@shared/systems/velocity.js"
          (lit get-tile-noise) "@crash-landed/noise.js"
          (lit Item-group) "@crash-landed/units.js"
          noise "@shared/noise.js"

          config "@crash-landed/config.js"
          ;; world-gen "@crash-landed/world-gen.js"
          )




(macro import-worker-scripts (...paths)
       `(import-scripts ...@(map paths (p)
                                 `(+ location.origin
                                     "/bundles/" @p)))
       )




(const p player)
(const v p.velocity.vector)

(const game-scale config.game-scale)
(assign p.physics.scale config.game-scale)
(set p.physics 'forces [])

(assign game.tiles tiles)
(assign Path-finding.tiles tiles)

(assign Velocity.real-time? false)
(assign Position.wraps? false)


(Sight.register-tile-graph tiles)
(.select-sequence p.sprite "east")
;; (generate-main-road)



(require! (lit Tile-generator) "@crash-landed/world-gen/worker.js")

(const generator (.spawn Tile-generator))

(def setup-tile (tile-data)

  (const tile (.get tiles tile-data.x tile-data.y))

  (assign tile.entity.ground.type tile-data.type)

  (const v (get-tile-noise tile.x tile.y))


  (when (and (> (+ v.x v.y) 16)
             (= tile.entity.ground.type 'flowery-grass))
    (const item (.spawn Item-group))
    (assign item.physics.scale config.game-scale)
    ;; (print "spawning food" this item)
    (const tile-container tile.entity.container)
    (set item.pos
         'x tile.world-pos.x
         'y tile.world-pos.y)
    (.add tile-container item.entity))

  (const ground-stats tile.entity.ground.stats)
  (const x* (mod (Math.abs (Math.round (* tile.x v.x)) )
                 (- ground-stats.sprite-coord-max-x
                    ground-stats.sprite-coord-min-x)))
  (const y* (mod (Math.abs (Math.round (* tile.y v.y)) )
                 (- ground-stats.sprite-coord-max-y
                    ground-stats.sprite-coord-min-y  )))

  ;; (const x* 1)
  ;; (const y* 1)
  (const coords [(+ x* tile.entity.ground.stats.sprite-coord-min-x)
                 (+ y* tile.entity.ground.stats.sprite-coord-min-y)
                 ])

  (.select-tile tile.entity.floor-sprite
                (dots coords)))
(.start generator)
(pipe (.load generator)
      (then-do (.get-near generator 0 0 2) )
      (then initial-tiles

            (each initial-tiles.tiles (data)
                  (setup-tile data))

            (.start game)
            (on game.events 'tick (t)

                ;; (const pos p.pos)
                (if! (= (mod t 20) 0)
                     (.step p.sprite))
                (if! (not generator.busy)
                     (const nearest-tile (.get-closest-from-world-pos
                                          tiles
                                          p.pos.x p.pos.y
                                          ))
                 (then (.get-near generator nearest-tile.x nearest-tile.y
                                  (if p.needs.is-resting? 3
                                      2)) data
                                      (each data.tiles (tile-data)
                                            (setup-tile tile-data)))
                 )
                (const direction-name (get-cardinal-direction-name v))

                (.select-sequence p.sprite direction-name))))






(start-interface)

