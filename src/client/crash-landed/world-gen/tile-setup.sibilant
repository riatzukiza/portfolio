(require! (lit Super-position) "@crash-landed/world-gen/super-position.js"
          (lit Tile-node ) "@shared/tiles.js"
          (lit get-tile-noise) "@crash-landed/noise.js"

          (lit Super-position-distrobution
               Expected-likelyhood-given-current-state
               Current-distrobution)
          "@crash-landed/world-gen/probabilities.js"
          (lit Item-group) "@crash-landed/units.js"
          config "@crash-landed/config.js"
          )
(var collapsed-tiles 0)

(def-generic Tile-node.collapse-wave-function ( (depth 0) (max-depth 2))

  (const super-position (.spawn Super-position this))
  (.collapse super-position)
  ;; (print (lit (type "grass")
  ;;             (current Current-distrobution.grass)
  ;;             (base Base-distrobution.grass)
  ;;             (expected Expected-likelyhood-given-current-state.grass))
  ;;        (lit (type "stone")
  ;;             (current Current-distrobution.stone)
  ;;             (base Base-distrobution.stone)
  ;;             (expected Expected-likelyhood-given-current-state.stone))
  ;;        (lit (type "flowers")
  ;;             (current Current-distrobution.flowery-grass)
  ;;             (base Base-distrobution.flowery-grass)
  ;;             (expected Expected-likelyhood-given-current-state.flowery-grass))
  ;;        )
  (incr collapsed-tiles)
  (.despawn super-position)
  )

(def-generic Tile-node.setup (x y)
  (const v (get-tile-noise x y))

  ;; seed the options
  ;; (if is-first-tile?
  ;;     (do (assign is-first-tile? false)
  ;;         (each cross-roads (tile-type direction)
  ;;               (print "initializing first chunk" tile-type direction)
  ;;               (if (= direction 'center)
  ;;                   (assign this.entity.ground.type tile-type)
  ;;                   (set (get this direction 'entity 'ground)
  ;;                        'type tile-type)))
  ;;       )
  ;;     (not this.entity.ground.type)
  ;;     (.collapse-wave-function this)

  ;;     )

  (.collapse-wave-function this)


  (when (and (> (+ v.x v.y) 16)
           (= this.entity.ground.type 'flowery-grass))
    (const item (.spawn Item-group))
    (assign item.physics.scale config.game-scale)
    ;; (print "spawning food" this item)
    (const tile-container this.entity.container)
    (set item.pos
         'x this.world-pos.x
         'y this.world-pos.y)
    (.add tile-container item.entity))

  
  (const ground-stats this.entity.ground.stats)
  (const x* (mod (Math.abs (Math.round (* this.x v.x)) ) (- ground-stats.sprite-coord-max-x
                                                 ground-stats.sprite-coord-min-x)))
  (const y* (mod (Math.abs (Math.round (* this.y v.y)) ) (- ground-stats.sprite-coord-max-y
                                                 ground-stats.sprite-coord-min-y  )))

  ;; (const x* 1)
  ;; (const y* 1)
  (const coords [(+ x* this.entity.ground.stats.sprite-coord-min-x)
                 (+ y* this.entity.ground.stats.sprite-coord-min-y)
                 ])

  (.select-tile this.entity.floor-sprite
                (dots coords))


  (.despawn v))
