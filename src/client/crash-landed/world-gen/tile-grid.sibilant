(require! (lit Event-emitter) "kit-events")
(require! (lit Spawnable) "@shared/data-structures/spawnable.js"
          (lit Trie) "@shared/data-structures/trees/trie.js"
          (lit Super-position) "@crash-landed/world-gen/super-position.js"
          (lit Grid-cell Grid Grid-chunk) "@shared/grid.js"
          )

(define Tile Grid-cell
  (gett data (lit (x this.x) (y this.y) (type this.type)))
  (def collapse ()
    (const s (.spawn Super-position this))
    (.collapse s)
    (.despawn s)
    (return this.data)))


(macro method* (name args ..body)
       ["*"name  `(parenthetic (comma @args.contents))
           `(curly (do-block ...@body))])
(def-lit-macro def-generic* (name args ...body)
  `(generic @name (method*) @args ...@body))

(define Chunk Grid-chunk
  (gett data (Array.from (.collapse this)))
  (def-generic* collapse ()

    (print "collapsing chunk" this)
    (if! this.collapsed (return))
    (for-of! cell this.cells
             (if! cell.type
                  (print "previously collapsed cell detected")
                  continue)
             (yield (.collapse cell)))
    (set this 'collapsed true)))

(export Tile)
(define Tile-grid Grid
  (Chunk Chunk)
  (Cell Tile)
  (init ((events ((create Event-emitter))))
        (.call Grid.init this))
  (chunk-size 16)
  (overlap-factor 2)
  (def collapse-area (x y w h))
  (def collapse-cell (x y) (.collapse (.get this x y)))
  (def collapse-chunk (x y) (.collapse (.get-chunk this x y)))
  (def collapse-nearest-chunk (x y) (.collapse (.get-nearest-chunk this x y)))
  (def collapse-cells (coords) (map coords (p) (.collapse (.get this p.x p.y))))
  (def collapse-nearest-chunks (x y n)
    (print this)
    (pipe (.get-nearest-chunks this x y n)
          (Array.from (=> (chunk) chunk.data))

          .flat)))

(export Tile-grid)

