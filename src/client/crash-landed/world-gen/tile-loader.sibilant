(require! (lit Event-emitter) "kit-events")
(require! (lit Spawnable) "@shared/data-structures/spawnable.js"
          (lit Trie) "@shared/data-structures/trees/trie.js"
          (lit Super-position) "@crash-landed/world-gen/super-position.js"
          )
(define Tile-node Spawnable
  (init (x y  graph) )
  (gett data (lit (x this.x)
                  (y this.y)
                  (type this.type)))

  (gett north (.get this.graph this.x (+ this.y 1)))
  (gett south (.get this.graph this.x (- this.y 1)))
  (gett east  (.get this.graph (+ this.x 1) this.y))
  (gett west (.get this.graph (- this.x 1) this.y))

  (gett north-east (.get this.graph (+ this.x 1) (+ this.y 1)))
  (gett north-west (.get this.graph (- this.x 1) (+ this.y 1)))
  (gett south-east (.get this.graph (+ this.x 1) (- this.y 1)))
  (gett south-west (.get this.graph (- this.x 1) (- this.y 1)))
  (gett edges [this.north
               this.south
               this.east
               this.west
               this.north-east
               this.north-west
               this.south-east
               this.south-west
               ])
  (gett thread-safe (.get-thread-safe-tile this.graph this.x this.y))

  (def-generic traverse-area (f  n visited (d 0) )
    (f this d n visited)
    (.add visited this)
    (if! (> n 0)
        (for-of! neighbor this.edges
                 (if (not (.has visited neighbor))
                     (.traverse-area neighbor f
                                     (- n 1)
                                     (+ d 1)
                                     visited))))
    this))
(export Tile-node)
(define Tile-loader Spawnable
  (init ((tiles (.spawn Trie ))
         (visited (new Set))
         (events ((create Event-emitter)))))
  ;; (def-generic get-thread-safe-tile (x y (depth 0) (max-depth 4) )
  ;;   (when (<= depth max-depth)
  ;;     (const tile (.get this x y))
  ;;     (lit x y
  ;;          (type tile.type)

  ;;          ( north (.get-thread-safe-tile this x (+ y 1) (+ depth 1) max-depth))
  ;;          ( south (.get-thread-safe-tile this x (- y 1) (+ depth 1) max-depth ) )
  ;;          ( east  (.get-thread-safe-tile this (+ x 1) y (+ depth 1) max-depth))
  ;;          ( west (.get-thread-safe-tile this (- x 1) y (+ depth 1) max-depth))

  ;;          ( north-east (.get-thread-safe-tile this (+ x 1) (+ y 1) (+ depth 1) max-depth))
  ;;          ( north-west (.get-thread-safe-tile this (- x 1) (+ y 1) (+ depth 1) max-depth))
  ;;          ( south-east (.get-thread-safe-tile this (+ x 1) (- y 1) (+ depth 1) max-depth))
  ;;          ( south-west (.get-thread-safe-tile this (- x 1) (- y 1) (+ depth 1) max-depth)))))
  (def get (x y)
    (if (.has this.tiles [x y])
        (.get this.tiles [x y])
        (do (const tile (.spawn Tile-node x y this))
            (.set this.tiles [x y] tile)
          tile))))
(export Tile-loader)
